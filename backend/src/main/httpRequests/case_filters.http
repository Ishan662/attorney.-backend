@auth_token = Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjU3YmZiMmExMWRkZmZjMGFkMmU2ODE0YzY4NzYzYjhjNjg3NTgxZDgiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vYXR0b3JuZXktNDU4NjIiLCJhdWQiOiJhdHRvcm5leS00NTg2MiIsImF1dGhfdGltZSI6MTc1NTQ0MDc1OCwidXNlcl9pZCI6IlQwVjF5RjV2UUFoTDVlWmt0OTNGVFdCYjlwTjIiLCJzdWIiOiJUMFYxeUY1dlFBaEw1ZVprdDkzRlRXQmI5cE4yIiwiaWF0IjoxNzU1NDQwNzU4LCJleHAiOjE3NTU0NDQzNTgsImVtYWlsIjoiZGFyc2hhbmEyMDIxc3VqYW5AZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImZpcmViYXNlIjp7ImlkZW50aXRpZXMiOnsiZW1haWwiOlsiZGFyc2hhbmEyMDIxc3VqYW5AZ21haWwuY29tIl19LCJzaWduX2luX3Byb3ZpZGVyIjoicGFzc3dvcmQifX0.HO0ziAKMpoOm76EH_qk4XIsYs4qjvDaBnD1xPb6Wz2JbyGCq9XYaTPMUAPJ07DNShphS_Bp4R58u90eNqg66qUnnn2_hM1hmoCMB7UvNS-pLfpzP8lJPzky3YfIkW9IXfQetgfVwbCof9jiQJZG9k0ceQYxsRwOFKUk5dKfo0kg_Go5xyX_oIlh50pWVjxpsVAeauWky80g0V2ND0GzI-axUZCn0YU2-55hJDeRg-7wOfBNEUN5b_7R7CR1g6zCMS2l8jFrmnDS5B4fBuiACmhp-1ZBW7oixUSKK5Y7Vo4lmjM0qunNPPBtbjQCzbeQI60P_0hWYv84zoTvuKxFkWw

### =================================================================
### Get Cases - Test Filtering (GET /api/cases)
### =================================================================

### Test 1: Get ALL cases for the logged-in user (No Filters)
# This simulates the initial page load.
# The backend should apply the security filter (firm_id for lawyer, user_id for junior)
# and return all accessible cases.
GET http://localhost:8080/api/cases
Content-Type: application/json
Authorization: {{auth_token}}

### =================================================================

### Test 2: Search by a Term ("Estate")
# The backend should now apply the search filter on top of the security filter.
# It will search across caseTitle, caseNumber, clientName, etc.
# This uses the new, simpler JPQL LIKE query.
GET http://localhost:8080/api/cases/filter?searchTerm=CASENO23
Content-Type: application/json
Authorization: {{auth_token}}

### =================================================================

### Test 3: Filter by Case Type ("Probate")
# This tests a single filter. The searchTerm is null.
GET http://localhost:8080/api/cases/filter?caseType=Probate
Content-Type: application/json
Authorization: {{auth_token}}

### =================================================================

### Test 4: Filter by Court ("Family Court")
GET http://localhost:8080/api/cases/filter?court=Supreme Court of Sri Lanka
Content-Type: application/json
Authorization: {{auth_token}}

### =================================================================

### Test 5: Filter by Case Status ("Closed")
# Note: Your CaseStatus enum must match this string exactly (e.g., "CLOSED").
GET http://localhost:8080/api/cases/filter?status=CLOSED
Content-Type: application/json
Authorization: {{auth_token}}

### =================================================================

### Test 6: Combination of Filters (Search + Case Type)
# This tests how the backend handles multiple filter criteria at once.
# It should find cases that are of type "Guardianship" AND contain the name "Rose".
GET http://localhost:8080/api/cases/filter?searchTerm=John&caseType=MR/DMR
Content-Type: application/json
Authorization: {{auth_token}}

### =================================================================

### Test 7: Search with a term that returns nothing
# This should return a 200 OK with an empty array: []
GET http://localhost:8080/api/cases/filter?searchTerm=NonExistentTermXYZ
Content-Type: application/json
Authorization: {{auth_token}}

### =================================================================
### (For Later Implementation) - Test Date Filtering
### =================================================================
# NOTE: The simple JPQL query I provided does not yet include the date filtering.
# This is a placeholder for when you add that logic.
# The @DateTimeFormat on the controller will correctly parse the YYYY-MM-DD format.
#
# GET http://localhost:8080/api/cases?startDate=2024-04-01&endDate=2024-05-31
# Content-Type: application/json
# Authorization: {{auth_token}}