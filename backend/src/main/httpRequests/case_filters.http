@auth_token = Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjlkMjEzMGZlZjAyNTg3ZmQ4ODYxODg2OTgyMjczNGVmNzZhMTExNjUiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vYXR0b3JuZXktNDU4NjIiLCJhdWQiOiJhdHRvcm5leS00NTg2MiIsImF1dGhfdGltZSI6MTc2MDk1MzE2MSwidXNlcl9pZCI6IlQwVjF5RjV2UUFoTDVlWmt0OTNGVFdCYjlwTjIiLCJzdWIiOiJUMFYxeUY1dlFBaEw1ZVprdDkzRlRXQmI5cE4yIiwiaWF0IjoxNzYwOTUzMTYxLCJleHAiOjE3NjA5NTY3NjEsImVtYWlsIjoiZGFyc2hhbmEyMDIxc3VqYW5AZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImZpcmViYXNlIjp7ImlkZW50aXRpZXMiOnsiZW1haWwiOlsiZGFyc2hhbmEyMDIxc3VqYW5AZ21haWwuY29tIl19LCJzaWduX2luX3Byb3ZpZGVyIjoicGFzc3dvcmQifX0.CdBExQzMKRGb5kgAm8vb_4lLsTOIa2qTqBxRLBE9oxc1qGLh3662whoiiS8oysNOpMke4dF9BlyC9NH8U_QBxfRB4WpyQyBS7mOc6-BAaCx0AKPIw7kvAMqhYRqxEoydkzLffjK9Y-FsDeobEeAOgy8CvXGZSfE5DbYgvpdk8fUTCQVRV1YK1Ld5fZ2VbWV_EpHIT9stMCeMDKVGCpEydxG8J-7kJ2LpFXMDedJmeqk1GGTkX-P4x4YciFJtKdl6yWqyW_StZQ9_aLH4MQaSe4LtmqMuaslz7GLUJqd8HxpPr5YTetInN1PMFOydSyJsvb14VglBO4ZidTxBgEn17Q


### =================================================================
### Get Cases - Test Filtering (GET /api/cases)
### =================================================================

### Test 1: Get ALL cases for the logged-in user (No Filters)
# This simulates the initial page load.
# The backend should apply the security filter (firm_id for lawyer, user_id for junior)
# and return all accessible cases.
GET http://localhost:8080/api/cases
Content-Type: application/json
Authorization: {{auth_token}}

### =================================================================

### Test 2: Search by a Term ("Estate")
# The backend should now apply the search filter on top of the security filter.
# It will search across caseTitle, caseNumber, clientName, etc.
# This uses the new, simpler JPQL LIKE query.
GET http://localhost:8080/api/cases/filter?searchTerm=DC
Content-Type: application/json
Authorization: {{auth_token}}

### =================================================================

### Test 3: Filter by Case Type ("Probate")
# This tests a single filter. The searchTerm is null.
GET http://localhost:8080/api/cases/filter?caseType=MR/DMR
Content-Type: application/json
Authorization: {{auth_token}}

### =================================================================

### Test 4: Filter by Court ("Family Court")
GET http://localhost:8080/api/cases/filter?court=District Court
Content-Type: application/json
Authorization: {{auth_token}}

### =================================================================

### Test 5: Filter by Case Status ("Closed")
# Note: Your CaseStatus enum must match this string exactly (e.g., "CLOSED").
GET http://localhost:8080/api/cases/filter?status=CLOSED
Content-Type: application/json
Authorization: {{auth_token}}

### =================================================================

### Test 6: Combination of Filters (Search + Case Type)
# This tests how the backend handles multiple filter criteria at once.
# It should find cases that are of type "Guardianship" AND contain the name "Rose".
GET http://localhost:8080/api/cases/filter?searchTerm=John&caseType=MR/DMR
Content-Type: application/json
Authorization: {{auth_token}}

### =================================================================

### Test 7: Search with a term that returns nothing
# This should return a 200 OK with an empty array: []
GET http://localhost:8080/api/cases/filter?searchTerm=NonExistentTermXYZ
Content-Type: application/json
Authorization: {{auth_token}}

### =================================================================
### (For Later Implementation) - Test Date Filtering
### =================================================================
# NOTE: The simple JPQL query I provided does not yet include the date filtering.
# This is a placeholder for when you add that logic.
# The @DateTimeFormat on the controller will correctly parse the YYYY-MM-DD format.
#
# GET http://localhost:8080/api/cases?startDate=2024-04-01&endDate=2024-05-31
# Content-Type: application/json
# Authorization: {{auth_token}}

### =================================================================
### FINAL: Test Date Filtering (Based on Hearing Dates)
### =================================================================
# These tests use the new, corrected backend logic. The filters will find
# any case that has AT LEAST ONE hearing within the specified date range.

### Test 8: Filter by Start Date Only
# Should return all cases that have a hearing on or after November 1st, 2025.
GET http://localhost:8080/api/cases/filter?startDate=2022-11-01
Content-Type: application/json
Authorization: {{auth_token}}

### =================================================================

### Test 9: Filter by End Date Only
# Should return all cases that have a hearing on or before November 30th, 2025.
GET http://localhost:8080/api/cases/filter?endDate=2027-11-30
Content-Type: application/json
Authorization: {{auth_token}}

### =================================================================

### Test 10: Filter by a Date Range (Start and End Date)
# Should return all cases that have a hearing anytime in November 2025.
GET http://localhost:8080/api/cases/filter?startDate=2025-11-01&endDate=2025-11-30
Content-Type: application/json
Authorization: {{auth_token}}

### =================================================================

### Test 11: Combination of Date Filter and Search Term
# This is the ultimate test of the dynamic query builder.
# Should return cases containing "DC" that ALSO have a hearing in November 2025.
GET http://localhost:8080/api/cases/filter?searchTerm=DC&startDate=2025-11-01&endDate=2025-11-30
Content-Type: application/json
Authorization: {{auth_token}}

### =================================================================

### Test 12: Date Range with No Results
# This should return a 200 OK with an empty array: []
# (Assuming you have no hearings scheduled in the year 2099).
GET http://localhost:8080/api/cases/filter?startDate=2099-01-01&endDate=2099-12-31
Content-Type: application/json
Authorization: {{auth_token}}