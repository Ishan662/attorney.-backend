spring.application.name=backend

# ===============================================
# SERVER PORT CONFIGURATION
# ===============================================
server.port=8080

# JPA / Hibernate settings
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true

# ===============================================
# GMAIL DATABASE CONFIGURATION
# ===============================================
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=${SPRING_DATASOURCE_DRIVER_CLASS_NAME}

# ===============================================
# GMAIL TWILLIO CONFIGURATION
# ===============================================
# Twilio Credentials - KEEP THESE SECRET
twilio.account.sid=${TWILIO_ACCOUNT_SID}
twilio.auth.token=${TWILIO_AUTH_TOKEN}
twilio.verify.service.sid=${TWILIO_VERIFY_SERVICE_SID}

# ===============================================
# GMAIL SMTP MAIL CONFIGURATION
# ===============================================
spring.mail.host=${SPRING_MAIL_HOST}
spring.mail.port=${SPRING_MAIL_PORT}
spring.mail.username=${SPRING_MAIL_USERNAME}
spring.mail.password=${SPRING_MAIL_PASSWORD}

# These properties enable a secure TLS connection with the Gmail server.
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true

# PayHere Config
payhere.merchantId=1232493
payhere.merchantSecret=MzY1MTk1NTMxODM0Mjc2MTQ5NjYyOTE2MDk1ODYwMzEyNjk1NjYyOA==
payhere.returnUrl=https://ellan-ungreened-nonsententiously.ngrok-free.dev/payment/success
payhere.cancelUrl=https://ellan-ungreened-nonsententiously.ngrok-free.dev/payment/cancel
payhere.notifyUrl=https://ellan-ungreened-nonsententiously.ngrok-free.dev/api/payments/payhere/webhook
payhere.defaultFirstName=Client
payhere.defaultLastName=User

# Stripe Configuration
stripe.api.key=sk_test_51QmDvQQKXhrTFb70dBIipdkE9qCXSYzeMyFPULq8IYANIP4jexRVFFUqruxEhRnbZx92zRciH7B3SnwuZDNE6H1f000LbCJBYa
stripe.success.url=http://localhost:5173/payment/success
stripe.cancel.url=http://localhost:5173/payment/cancel

stripe.webhook.secret=whsec_c5648aa6731ef9d0095c9be8db9b389f4ab6a7b83f4ac9ac3138bfa2d5723a74



# --- Recommended HikariCP Configuration for Development ---

# 1. Set a reasonable pool size. For most development, 5-10 is plenty.
spring.datasource.hikari.maximum-pool-size=10

# 2. THE MOST IMPORTANT FIX: Set the idle timeout.
# This is the maximum amount of time a connection is allowed to sit idle in the pool.
# After this time, HikariCP will retire it. Set it to something reasonable, like 10 minutes.
# The value is in milliseconds (600000ms = 10 minutes).
spring.datasource.hikari.idle-timeout=600000

# 3. Set a maximum connection lifetime.
# This forces connections to be retired and replaced after a certain amount of time,
# preventing them from becoming stale due to network issues or database restarts.
# A value of 30 minutes is a good starting point (1800000ms = 30 minutes).
spring.datasource.hikari.max-lifetime=1800000

# 4. (Optional) Set a connection timeout.
# This is how long your application will wait to get a connection from the pool
# before throwing an exception. Helps to detect issues faster.
spring.datasource.hikari.connection-timeout=30000

