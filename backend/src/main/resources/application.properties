spring.application.name=backend

# ===============================================
# SERVER PORT CONFIGURATION
# ===============================================
server.port=8080

# JPA / Hibernate settings
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true

# ===============================================
# GMAIL DATABASE CONFIGURATION
# ===============================================
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=${SPRING_DATASOURCE_DRIVER_CLASS_NAME}

# ===============================================
# GMAIL TWILLIO CONFIGURATION
# ===============================================
# Twilio Credentials - KEEP THESE SECRET
twilio.account.sid=${TWILIO_ACCOUNT_SID}
twilio.auth.token=${TWILIO_AUTH_TOKEN}
twilio.verify.service.sid=${TWILIO_VERIFY_SERVICE_SID}

# ===============================================
# GMAIL SMTP MAIL CONFIGURATION
# ===============================================
spring.mail.host=${SPRING_MAIL_HOST}
spring.mail.port=${SPRING_MAIL_PORT}
spring.mail.username=${SPRING_MAIL_USERNAME}
spring.mail.password=${SPRING_MAIL_PASSWORD}

# These properties enable a secure TLS connection with the Gmail server.
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true


# Stripe Configuration
stripe.api.key=${STRIPE_API_KEY}
stripe.success.url=${STRIPE_SUCCESS_URL}
stripe.cancel.url=${STRIPE_CANCEL_URL}
stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET}


# --- Recommended HikariCP Configuration for Development ---

# 1. Set a reasonable pool size. For most development, 5-10 is plenty.
# This was the initial problem: a default size that was too large.
spring.datasource.hikari.maximum-pool-size=10

# 2. THE MOST IMPORTANT FIX: Set the idle timeout.
# This is the maximum amount of time a connection is allowed to sit idle in the pool.
# After this time, HikariCP will retire it. Set it to something reasonable, like 10 minutes.
# The value is in milliseconds (600000ms = 10 minutes).
spring.datasource.hikari.idle-timeout=60000

# 3. Set a maximum connection lifetime.
# This forces connections to be retired and replaced after a certain amount of time,
# preventing them from becoming stale due to network issues or database restarts.
# A value of 30 minutes is a good starting point (1800000ms = 30 minutes).
spring.datasource.hikari.max-lifetime=180000

# 4. (Optional) Set a connection timeout.
# This is how long your application will wait to get a connection from the pool
# before throwing an exception. Helps to detect issues faster.
spring.datasource.hikari.connection-timeout=3000



# --- File Storage Configuration ---
# Use an absolute path outside of your project directory.
# On Linux/macOS:
#nadexplorer path
#file.upload-dir=/home/nadexplorer/Desktop/Desktop_Backup/Attorny/Attorney.-Backend/backend/file_upload
#nishagi path
file.upload-dir=/Users/nishagi/myStuff/Ongoingprojects/attorney/dev/attorney.-backend/backend/file_uploa
# On Windows (use forward slashes, Spring will handle it):
# file.upload-dir=C:/Users/YourUser/attorney-app/uploads

